(cl-module bfo-ro-background

           // ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
           // is_a and instance_of
           // ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
           (relation is_a)
           (label is_a "is_a")
           (transitive is_a)
           (anti_symmetric is_a)
           (reflexive is_a)
           (comment is_a "When translating to OWL, is_ axioms are translated to subClassOf axioms")
           (example is_a (is_a "astrocyte" "glial cell") "CL")
           (example is_a (is_a "serotonin" "biogenic amine") "CHEBI")
           (example is_a (is_a "catabolic process" "metabolic process") "GO")
           (exact_synonym is_a "is_subtype_of")
           (exact_synonym is_a "subtype_of")
           (exact_synonym is_a "is_a_kind_of")
           (exact_synonym is_a "kind_of")
           (exact_synonym is_a "type_of")
           (exported_identifier is_a "OBO_REL_C:0000001")
           (alternate_identifier is_a "OBO_REL:is_a")
           (xref is_a "rdfs:subClassOf")
           (text_definition is_a "For continuants: C is_a C' if and only if: given any c that instantiates C at a time t, c instantiates C' at t. For occurrents: P is_a P' if and only if: that given any p that instantiates P, then p instantiates P'.")
           (text_definition_xref is_a "PMID:15892874")
           (type_type is_a)
           (atemporal is_a)
           (forall (X Y)
                   (if (is_a X Y)
                       (forall (i)
                               (if (instance_of i X)
                                   (instance_of i Y)))))
           (forall (X Y)
                   (if (is_a X Y)
                       (forall (i t)
                               (if (instance_of i X t)
                                   (instance_of i Y t)))))


           (relation instance_of)
           (label instance_of "instance_of")
           (comment instance_of "When translating to OWL, instance_of axioms are translated to classAssertion axioms")
           (xref instance_of "rdf:type")
           (example instance_of (instance_of "John Doe's heart" "Heart [FMA]" "t1"))
           (example instance_of (instance_of "Lake Geneva [GAZ:1234567]" "freshwater lake [ENO:98765432]" "2009") "GAZ")
           (exported_identifier instance_of "OBO_REL_I:0000023")
           (text_definition instance_of "A relation between an instance and a class/type. For components: a primitive relation between a component instance and a class which it instantiates at a specific time. For processes: a primitive relation, between a process instance and a class which it instantiates, holding independently of time")
           (text_definition_xref instance_of "PMID:15892874")
           (instance_type instance_of)
           (atemporal_or_temporal instance_of)
           (instance_type instance_of)
           //(holds_temporally_between instance_of Continuant type) 
           //(holds_atemporally_between instance_of Occurrent type) 

           // Axiom: continuants temporally instantiate types
           (forall (i u t)
                   (if (instance_of i u t)
                       (is_a u Continuant)))

           // Axiom: occurrents (processes, stages, etc) atemporally instantiate types
           (forall (i U)
                   (if (instance_of i U)
                       (is_a U Occurent)))



           // existence

           // the following axioms are introduced in order to define derives_from

           (forall (c t t1)
                   (iff (only_exists_prior_to c t)
                        (and (exists (t1)
                                     (and (exists_at c t1)
                                          (earlier_than t1 t)))
                             (if (exists_at c t2)
                                 (earlier_than t t2)))))
           (forall (c t t1)
                   (iff (only_exists_subsequent_to c t)
                        (and (exists (t1)
                                     (and (exists_at c t1)
                                          (earlier_than t t1)))
                             (if (exists_at c t2)
                                 (earlier_than t2 t)))))

           (relation exists_at)
           (text_definition exists_at "A primitive relation between a continuant and an instant of time.")
           (label exists_at "exists_at")
           (domain exists_at Continuant)
           (range exists_at TemporalInstant)
           (exported_identifier exists_at "OBO_REL_I:0000040")
           // @Axiom: something exists at a time iff it is an instance of something at that time
           (forall (i t)
                   (iff
                    (exists_at i t)
                    (exists (U) (instance_of i U t))))

           // @Axiom: something exists at a time iff it is participating in something at that time
           (forall (c t)
                   (iff (exists_at c t)
                        (exists (p)
                                (has_participant p c t))))

           (relation occurs_at)
           (label occurs_at "occurs_at")
           (domain occurs_at Occurrent)
           (range occurs_at TemporalInstant)
           (exported_identifier occurs_at "OBO_REL_I:0000041")
           (forall (p t)
                   (iff (occurs_at p t)
                        (exists (c) 
                                (has_participant p c t))))



           (relation first_instant_of)
           (label first_instant_of "first_instant_of")
           (exported_identifier first_instant_of "OBO_REL_I:0000042")
           (forall (t p)
                   (iff (first_instant_of t p)
                        (and (occurs_at p t)
                             (if (earlier_than t1 t)
                                 (not (occurs_at p t1))))))

           (relation last_instant_of)
           (label last_instant_of "last_instant_of")
           (exported_identifier last_instant_of "OBO_REL_I:0000043")
           (forall (t p)
                   (iff (last_instant_of t p)
                        (and (occurs_at p t)
                             (if (earlier_than t t1)
                                 (not (occurs_at p t1))))))


           (relation has_duration)
           (label has_duration "has_duration")
           (domain has_duration Occurrent)
           (range has_duration TemporalInterval)
           (text_definition has_duration "Instance level relation between an occurrent and a temporal interval, such that the two temporally coincide. The interval is defined by the start and end of the process.")
           (exported_identifier has_duration "OBO_REL_I:0000045")
           // @Axiom: p has_duration y iff p is an occurrent, and for any t such that t is bound by the start and end of p, it is the case that p occurs_at t, and y is the interval with those boundaries
           (forall (p y)
                   (iff (has_duration p y)
                        (and (instance_of p Occurrent)
                             (exists (t1) (first_instant_of t1 p))
                             (exists (t2) (last_instant_of t2 p))
                             (if (and (earlier_than t1 t)
                                      (earlier_than t t2))
                                 (occurs_at p t))
                             (= y (interval t1 t2)))))

           // Here a new functional operator 'the interval ( , )' has been introduced, which generates the name of an interval from a pair of names for times. 



           // imported IDs
           //(exported_identifier IndependentContinuant "bfo:IndependentContinuant")

           (relation earlier_than)
           (label earlier_than "earlier_than")
           (broad_synonym earlier_than "<")
           (exact_synonym earlier_than "earlier")
           (exact_synonym earlier_than "before")
           (domain earlier_than TemporalInstant)
           (range earlier_than TemporalInstant)
           (transitive earlier_than)
           (comment earlier_than "earlier_than is treated as a primitive in RO. Neuhaus & Osumi-Sutherland treat befsim as the primitive")
           (text_definition_xref earlier_than "PMID:15892874")



)

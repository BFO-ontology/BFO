;;;	     ("ready-for-release" !obo:IAO_0000122)
;;;	     ("metadata-complete" !obo:IAO_0000120)
;;;	     ("metadata-incomplete" !obo:IAO_0000123)
;;;	     ("pending-final-vetting" !obo:IAO_0000125)
;;;	     ("uncurated" !obo:IAO_0000124)
;;;	     ("placeholder" !obo:IAO_0000121)
;;;	     ("has-curation-status" !obo:IAO_0000114)
;;;	     ("curation-status" !obo:IAO_0000078)

(defvar *bfo2-ontprops* 
  '(("definition" !obo:IAO_0000115)
    ("definition-source" !obo:IAO_0000119)
    ("term-editor" !obo:IAO_0000117)
    ("preferred-term" !obo:IAO_0000111)
    ("alternative-term" !obo:IAO_0000118)
    ("example-of-usage" !obo:IAO_0000112)
    ("imported-from" !obo:IAO_0000412)
    ("editor-note" !obo:IAO_0000116)
    ("curator-note" !obo:IAO_0000232)
    ("bfo-spec-label" !obo:BFO_0000179)
    ))

(defmacro with-obo-metadata-uris (&body body)
  `(let-uri ,*bfo2-ontprops*
     ,@body
     ))

(defun generate-ontology-properties (bfo2)
  `((annotation !rdfs:comment "This is an early version of BFO version 2 and has not yet been extensively reviewed by the project team members. Please see the project site http://code.google.com/p/bfo/ , the bfo2 owl discussion group http://groups.google.com/group/bfo-owl-devel , the bfo2 discussion group http://groups.google.com/group/bfo-devel, the tracking google doc http://goo.gl/IlrEE, and the current version of the bfo2 reference http://bfo.googlecode.com/svn/trunk/docs/bfo2-reference/BFO2-Reference.docx . This ontology is generated from a specification at http://bfo.googlecode.com/svn/trunk/src/tools/bfo2-reference.lisp and http://bfo.googlecode.com/svn/trunk/src/tools/bfo2-uris.lisp , with the code that generates the OWL version residing in the same directory.")))

(defun generate-ontology-annotation-property-defs (bfo2)
  (let ((om (load-ontology "https://information-artifact-ontology.googlecode.com/svn/trunk/src/ontology/ontology-metadata.owl")))
    (list*
     `(declaration (annotation-property ,!rdfs:isDefinedBy))
     `(declaration (annotation-property ,!bfo-spec-label))
     `(annotation-assertion !rdfs:label ,!bfo-spec-label "bfo specification label")
     `(sub-annotation-property-of ,!bfo-spec-label ,!rdfs:label)
     (loop for (here-label prop) in (eval-uri-reader-macro *bfo2-ontprops*)
	for label = (entity-label prop om)
	when label collect `(annotation-assertion !rdfs:label ,prop ,label)
	when label collect `(annotation-assertion !rdfs:isDefinedBy ,prop ,!obo:iao.owl)))))

(defun a-better-lousy-label (handle)
  (loop with now = (string-downcase (string handle)) for (match replace) in
       '(("_at$" "-at-all-times")
	 ("_st$" "-at-some-time")
	 ("^c-" "continuant-")
	 ("^o-" "occurrent-")
	 ("^t-" "temporal-")
	 ("^p-" "process-")
	 ("-s(-|$)" "-spatial-")
	 ("-t-" "-temporal-")
	 ("\\bcf\\b" "continuant-fiat")
	 ("^s-d" "specifically-d")
	 ("^g-" "generically-")
	 ("^ic" "independent continuant")
	 ("^sdc" "specifically-dependent-continuant")
	 ("^gdc" "generically-dependent-continuant")
	 ("^st-" "spatiotemporal-")
	 ("\\bst\\b" "spatiotemporal")
	 ("^s-" "spatial-")
	 ("-ppart-" "-proper part-")
	 ("-dep-" "-dependent-")
	 ("([0-3])d-" "$1.dimensional ");; I don't know why a "-" in the replacement works here. So change to "." and use another rule to replace with "-"
	 ("-f-" "-function-")
	 ("^r-q" "relational-q")
	 ("\\br\\b" "region")
	 ("\\bq\\b" "quality")
	 ("\\bf\\b" "function")
	 ("\\bd\\b" "disposition")
	 ("\\bg\\f" "generic")
	 ("-t$" "-time")
	 ("^(\\\w+\\b) has" "has $1")
	 ("-" " ")
	 ("\\." "-"))
       do
       (setq now (#"replaceAll" now match replace))
     finally (return now)))

(defun generate-label-annotations (bfo2)
  (let ((seen (make-hash-table))
	(axs nil))
    (with-bfo-uris bfo2
      (loop for (table type) in
	   '((bfo-class2subclass class) (bfo-2prop2subprop object-property) (bfo-3prop2subprop Object-property))
	   do
	   (maphash (lambda(c sc) 
		      (loop for el in (cons c sc)
			 do
			 (unless (gethash el seen)
			   (push `(annotation-assertion !rdfs:label ,(eval el) ,(a-better-lousy-label el))
				 axs)
			   (push `(annotation-assertion !bfo-spec-label ,(eval el) ,(string-downcase (string el)))
				 axs)
			   (setf (gethash el seen) t))))
		    (funcall table bfo2)))
      axs)))
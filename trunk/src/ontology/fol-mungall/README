BFO First-Order Logic Representation (Experimental)
---------------------------------------------------

The representation is in CLIF (Common Logic Interchange Format) and is
subdivided into 3 directories:

* fol-src/
* fol-derived/
* meta/

RO and BFO are currently maintained in separate files.

The primary copy is in the fol-src/ directory - this uses a high-level
representation in which relations are in the domain of discourse. For
example, it contains sentences of the form:

  (transitive part_of)

Here we call 'transitive' a meta-predicate or meta-relation. The
'meta' directory contains second-order flavour axioms such as the
following:

  (forall (r)
          (iff (transitive r)
               (forall (x y z)
                       (if (and (r x y)
                                (r y z))
                           (r x z)))))
  
  (forall (r)
          (iff (transitive r)
               (forall (x y z t)
                       (if (and (r x y t)
                                (r y z t))
                           (r x z t)))))

Note that this includes predicates in the variable position, which
makes the combination of fol-src plus meta syntactically
second-order. But semantically we are still within FOL. Nevertheless,
this is too expressive for many theorem provers to handle. We can
treat the axioms as simple macro-expansion rules and arrive at a
syntactically first-order representation. This goes in
fol-derived. Here we see for example:

  (forall (x y z)
   (if (and (part_of x y)(part_of y z))
    (part_of x z)))
  
  (forall (x y z t)
   (if (and (part_of x y t)(part_of y z t))
    (part_of x z t)))

This could be considered in some sense the more accurate
representation of BFO, since relations are removed from the domain of
discourse. However, the primary representation is more convenient,
readable, and easier to translate to OWL.

The translation is handled by the Makefile in this directory. cltools
is required (http://github.com/cmungall/cltools/). At the moment
translations to CLIF and to Prover9 are supported, and pregenerated in
this directory.

Why do it this way? One reason is that the macro approach is easier to
maintain as it involves less repetitive typing. Also, in abstracting
the patterns we make it easier to translate to other languages. It is
diffiult to translate the axioms in fol-derived directly to OWL, but
much simpler to translate the axioms in fol-src (for the subset that
can be expressed).

More docs on translating to / syncing with OWL coming soon.

CLIF NOTES

http://www.common-logic.org

This representation uses CLIF as it's primary form. P9 can be
generated from this (see Makefile).

More discussion required on what features of CLIF we should use for
annotating axioms. At the moment:

- every component should go into its own module (ideally this would
  correspond with the modular layour of the OWL)

- axioms are annotated using cl-comment

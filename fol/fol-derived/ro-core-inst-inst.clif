(relation part_of)

(label part_of part_of)

(exact_synonym part_of is_part_of)


(forall (a b)
 (iff (part_of a b)
(has_part b a)))


(forall (a b t)
 (iff (part_of a b t)
(has_part b a t)))

(normative_direction_for part_of part)

(normative part_of)


(forall (x y z)
 (if (and (part_of x y)(part_of y z))
  (part_of x z)))


(forall (x y z t)
 (if (and (part_of x y t)(part_of y z t))
  (part_of x z t)))

(anti_symmetric part_of)

(example part_of (part_of "John Doe's Heart" "John Doe's Body" t1)

)

(example part_of (part_of "John Doe's childhood" "John Doe's lifespan")

)


(forall (a b)
 (if 
 (exists (a b)(part_of a b))
  (part_of a a)))


(forall (a b t)
 (if 
 (exists (a b t)(part_of a b t))
  (part_of a a t)))

(exported_identifier part_of "OBO_REL_I:0000002")

(alternate_identifier part_of "OBO_REL:part_of")

(comment part_of "The primitive instance-level relation p part_of p1 is illustrated in assertions such as: this instance of rhodopsin mediated phototransduction part_of this instance of visual perception.    This relation satisfies at least the following standard axioms of mereology: reflexivity (for all p, p part_of p); anti-symmetry (for all p, p1, if p part_of p1 and p1 part_of p then p and p1 are identical); and transitivity (for all p, p1, p2, if p part_of p1 and p1 part_of p2, then p part_of p2). Analogous axioms hold also for parthood as a relation between spatial regions.    For parthood as a relation between continuants, these axioms need to be modified to take account of the incorporation of a temporal argument. Thus for example the axiom of transitivity for continuants will assert that if c part_of c1 at t and c1 part_of c2 at t, then also c part_of c2 at t.")

(text_definition part_of "part_of on the instance level is a primitive relation, holding either atemporally between two process instances or temporally between two continuant instances")

(text_definition_xref part_of "PMID:15892874")

(relation part_of)


(forall (a b)
 (if (part_of a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (part_of a b t)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a IndependentContinuant t))
  (instance_of b IndependentContinuant t)))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a DependentContinuant t))
  (instance_of b DependentContinuant t)))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a Role t))
  (instance_of b Role t)))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a Quality t))
  (instance_of b Quality t)))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a RealizableEntity t))
  (instance_of b RealizableEntity t)))


(forall (a b t)
 (if (and (part_of a b t)(instance_of t TemporalInstant)(instance_of a SpatialRegion t))
  (instance_of b SpatialRegion t)))


(forall (a b)
 (if (and (part_of a b)(instance_of a ProcessualEntity))
  (instance_of b ProcessualEntity)))


(forall (a b)
 (if (and (part_of a b)(instance_of a Occurrent))
  (instance_of b Occurrent)))


(forall (a b)
 (if (and (part_of a b)(instance_of a Process))
  (instance_of b Process)))

(atemporal_or_temporal part_of)


(forall (i1 i2 t)
 (if (part_of i1 i2 t)
  (and (instance_of t TemporalInstant)(instance_of i1 Continuant t)(instance_of i2 Continuant t))))


(forall (i1 i2)
 (if (part_of i1 i2)
  (and (instance_of i1 Occurrent)(instance_of i2 Occurrent))))


(forall (x y w)
 (if (part_of x y w)
  (and (exists_at x w)(exists_at y w))))

(never_holds_between Entity Function)

(never_holds_between Entity Disposition)

(relation has_part)

(relation has_part)


(forall (a b)
 (if (has_part a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (has_part a b t)
  (and (instance a)(instance b))))

(label has_part has_part)


(forall (a b)
 (iff (has_part a b)
(part_of b a)))


(forall (a b t)
 (iff (has_part a b t)
(part_of b a t)))


(forall (x y z)
 (if (and (has_part x y)(has_part y z))
  (has_part x z)))


(forall (x y z t)
 (if (and (has_part x y t)(has_part y z t))
  (has_part x z t)))

(anti_symmetric has_part)


(forall (a b)
 (if 
 (exists (a b)(has_part a b))
  (has_part a a)))


(forall (a b t)
 (if 
 (exists (a b t)(has_part a b t))
  (has_part a a t)))

(exported_identifier has_part "OBO_REL_I:0000003")

(comment has_part "primitive instance-level relation, the inverse of *part_of*")

(atemporal_or_temporal has_part)

(relation proper_part_of)

(relation proper_part_of)


(forall (a b)
 (if (proper_part_of a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (proper_part_of a b t)
  (and (instance a)(instance b))))

(label proper_part_of proper_part_of)

(subrelation proper_part_of part_of)


(forall (a b)
 (iff (proper_part_of a b)
(has_proper_part b a)))


(forall (a b t)
 (iff (proper_part_of a b t)
(has_proper_part b a t)))

(normative_direction_for proper_part_of proper_part)


(forall (x y z)
 (if (and (proper_part_of x y)(proper_part_of y z))
  (proper_part_of x z)))


(forall (x y z t)
 (if (and (proper_part_of x y t)(proper_part_of y z t))
  (proper_part_of x z t)))

(proper_subrelation proper_part_of part_of)

(exported_identifier proper_part_of "OBO_REL_I:0000006")

(text_definition proper_part_of "As for part_of, with the additional constraint that subject and object are distinct")

(text_definition_xref proper_part_of "PMID:15892874")


(forall (x y)
 (iff (proper_part_of x y)
(and (part_of x y)(not (part_of y x)))))

(relation has_proper_part)

(relation has_proper_part)


(forall (a b)
 (if (has_proper_part a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (has_proper_part a b t)
  (and (instance a)(instance b))))

(label has_proper_part has_proper_part)

(subrelation has_proper_part has_part)


(forall (a b)
 (iff (has_proper_part a b)
(proper_part_of b a)))


(forall (a b t)
 (iff (has_proper_part a b t)
(proper_part_of b a t)))


(forall (x y z)
 (if (and (has_proper_part x y)(has_proper_part y z))
  (has_proper_part x z)))


(forall (x y z t)
 (if (and (has_proper_part x y t)(has_proper_part y z t))
  (has_proper_part x z t)))

(text_definition has_proper_part "As for has_part, with the additional constraint that subject and object are distinct")

(exported_identifier has_proper_part "OBO_REL_I:0000007")

(relation adjacent_to)

(relation adjacent_to)


(forall (a b)
 (if (adjacent_to a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (adjacent_to a b t)
  (and (instance a)(instance b))))

(label adjacent_to adjacent_to)


(forall (x y z)
 (if (adjacent_to x y)
  (adjacent_to y x)))

(comment adjacent_to "Note that adjacent_to is only symmetric at the instance level")

(exported_identifier adjacent_to "OBO_REL_I:0000012")

(text_definition adjacent_to "c adjacent to c' if and only if: c and c' are in spatial proximity")

(domain adjacent_to IndependentContinuant)

(range adjacent_to IndependentContinuant)

(not 
(exists (x y)(and (adjacent_to x y)(overlaps x y)))

)

(not 
(exists (x y t)(and (adjacent_to x y t)(overlaps x y t)))

)

(relation contained_in)

(relation contained_in)


(forall (a b)
 (if (contained_in a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (contained_in a b t)
  (and (instance a)(instance b))))

(label contained_in contained_in)


(forall (a b)
 (iff (contained_in a b)
(contains b a)))


(forall (a b t)
 (iff (contained_in a b t)
(contains b a t)))

(normative_direction_for contained_in containment)

(comment contained_in "Containment obtains in each case between material and immaterial continuants, for instance: lung contained_in thoracic cavity; bladder contained_in pelvic cavity. Hence containment is not a transitive relation.    If c part_of c1 at t then we have also, by our definition and by the axioms of mereology applied to spatial regions, c located_in c1 at t. Thus, many examples of instance-level location relations for continuants are in fact cases of instance-level parthood. For material continuants location and parthood coincide. Containment is location not involving parthood, and arises only where some immaterial continuant is involved. To understand this relation, we first define overlap for continuants as follows:    c1 overlap c2 at t =def for some c, c part_of c1 at t and c part_of c2 at t. The containment relation on the instance level can then be defined (see definition):")

(exported_identifier contained_in "OBO_REL_I:0000010")

(text_definition contained_in "c contained_in c' at t if and only if: c located_in c' at t, and it is not the case that c *overlaps* c' at t. (c' is a conduit or cavity.)")

(text_definition_xref contained_in "PMID:15892874")

(holds_temporally contained_in)

(domain contained_in IndependentContinuant)

(range contained_in IndependentContinuant)


(forall (x y t)
 (iff (contained_in x y t)
(and (located_in x y t)(not (overlaps x y t)))))

(relation contains)

(relation contains)


(forall (a b)
 (if (contains a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (contains a b t)
  (and (instance a)(instance b))))

(label contains contains)


(forall (a b)
 (iff (contains a b)
(contained_in b a)))


(forall (a b t)
 (iff (contains a b t)
(contained_in b a t)))

(exported_identifier contains "OBO_REL_I:0000011")

(relation located_in)

(label located_in located_in)

(domain located_in Continuant)

(range located_in IndependentContinuant)


(forall (a b)
 (iff (located_in a b)
(location_of b a)))


(forall (a b t)
 (iff (located_in a b t)
(location_of b a t)))

(normative_direction_for located_in location)


(forall (x y z)
 (if (and (located_in x y)(located_in y z))
  (located_in x z)))


(forall (x y z t)
 (if (and (located_in x y t)(located_in y z t))
  (located_in x z t)))


(forall (a b)
 (if 
 (exists (a b)(located_in a b))
  (located_in a a)))


(forall (a b t)
 (if 
 (exists (a b t)(located_in a b t))
  (located_in a a t)))


(forall (i1 i2 i3)
 (if (and (located_in i1 i2)(part_of i2 i3))
  (located_in i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (located_in i1 i2 t)(part_of i2 i3 t))
  (located_in i1 i3 t)))

(comment located_in "Location as a relation between instances: The primitive instance-level relation c located_in r at t reflects the fact that each continuant is at any given time associated with exactly one spatial region, namely its exact location. Following we can use this relation to define a further instance-level location relation - not between a continuant and the region which it exactly occupies, but rather between one continuant and another. c is located in c1, in this sense, whenever the spatial region occupied by c is part_of the spatial region occupied by c1. Note that this relation comprehends both the relation of exact location between one continuant and another which obtains when r and r1 are identical (for example, when a portion of fluid exactly fills a cavity), as well as those sorts of inexact location relations which obtain, for example, between brain and head or between ovum and uterus")

(exported_identifier located_in "OBO_REL_I:0000008")

(text_definition located_in Primitive)

(text_definition_xref located_in "PMID:15892874")


(forall (c c1)
 (iff (located_in c c1)

  (exists (r r1)(and (occupies c r)(occupies c1 r1)(part_of r r1)))))

(text_definition_xref located_in "PMID:15892874")

(relation location_of)

(label location_of location_of)

(domain location_of Continuant)

(range location_of Continuant)


(forall (a b)
 (iff (location_of a b)
(located_in b a)))


(forall (a b t)
 (iff (location_of a b t)
(located_in b a t)))


(forall (x y z)
 (if (and (location_of x y)(location_of y z))
  (location_of x z)))


(forall (x y z t)
 (if (and (location_of x y t)(location_of y z t))
  (location_of x z t)))


(forall (a b)
 (if 
 (exists (a b)(location_of a b))
  (location_of a a)))


(forall (a b t)
 (if 
 (exists (a b t)(location_of a b t))
  (location_of a a t)))

(exported_identifier location_of "OBO_REL_I:0000009")

(relation overlaps)

(label overlaps overlaps)

(domain overlaps IndependentContinuant)

(range overlaps IndependentContinuant)


(forall (x y z)
 (if (overlaps x y)
  (overlaps y x)))


(forall (a b)
 (if 
 (exists (a b)(overlaps a b))
  (overlaps a a)))


(forall (a b t)
 (if 
 (exists (a b t)(overlaps a b t))
  (overlaps a a t)))

(intransitive overlaps)

(text_definition overlaps "x overlaps y if and only if: there is some z such that: z part_of x and z part_of y (i.e. x and y share a part)")

(comment overlaps "note that the definition of overlaps includes the case where x is part_of y - for example, a nucleus overlaps a cell. We also have the *partial_overlaps* relation for those cases where x and y overlap but neither is part of the other")

(exported_identifier overlaps "OBO_REL_I:0000201")


(forall (i1 i2 i3)
 (if (and (has_part i1 i2)(part_of i2 i3))
  (overlaps i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (has_part i1 i2 t)(part_of i2 i3 t))
  (overlaps i1 i3 t)))


(forall (i1 i3)
 (if (overlaps i1 i3)
  
  (exists (i2)(and (has_part i1 i2)(part_of i2 i3)))))


(forall (i1 i3 t)
 (if (overlaps i1 i3 t)
  
  (exists (i2)(and (has_part i1 i2 t)(part_of i2 i3 t)))))


(forall (x y)
 (iff (overlaps x y)

  (exists (z)(and (part_of z x)(part_of z y)))))


(forall (x t)
 (if (and (exists_at x t)
 (forall (z)
  (if (overlaps z x t)
   (overlaps y x t))))
  (part_of x y t)))

(relation partially_overlaps)

(label partially_overlaps partially_overlaps)

(example partially_overlaps "A National Park whose area is included in two counties would have this relationship to each of the counties." GAZ)

(domain partially_overlaps IndependentContinuant)

(range partially_overlaps IndependentContinuant)

(intransitive partially_overlap)


(forall (x y z)
 (if (partially_overlap x y)
  (partially_overlap y x)))

(exported_identifier partially_overlaps "OBO_REL_I:0000202")

(text_definition partially_overlaps "x partially_overlaps y if and only if: x overlaps y and neither x is part_of y not y is part_of x")

(subrelation partially_overlaps overlaps)

(not 
(exists (x y)(and (partially_overlaps x y)(part_of x y)))

)

(not 
(exists (x y t)(and (partially_overlaps x y t)(part_of x y t)))

)

(not 
(exists (x y)(and (partially_overlaps x y)(has_part x y)))

)

(not 
(exists (x y t)(and (partially_overlaps x y t)(has_part x y t)))

)


(forall (x y)
 (iff (partially_overlaps x y)
(and (overlaps x y)(not (part_of x y))(not (part_of y x)))))

(relation underlaps)

(label underlaps underlaps)

(domain underlaps IndependentContinuant)

(range underlaps IndependentContinuant)


(forall (x y z)
 (if (underlaps x y)
  (underlaps y x)))


(forall (a b)
 (if 
 (exists (a b)(underlaps a b))
  (underlaps a a)))


(forall (a b t)
 (if 
 (exists (a b t)(underlaps a b t))
  (underlaps a a t)))

(intransitive underlaps)

(exported_identifier underlaps "OBO_REL_I:0000210")


(forall (x y)
 (iff (underlaps x y)

  (exists (z)(and (part_of x z)(part_of y z)))))

(relation has_participant)

(relation has_participant)


(forall (a b)
 (if (has_participant a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (has_participant a b t)
  (and (instance a)(instance b))))

(label has_participant has_participant)

(domain has_participant Occurrent)

(range has_participant IndependentContinuant)


(forall (a b)
 (iff (has_participant a b)
(participates_in b a)))


(forall (a b t)
 (iff (has_participant a b t)
(participates_in b a t)))

(normative_direction_for has_participant participation)

(text_definition has_participant "Has_participant is a primitive instance-level relation between a process, a continuant, and a time at which the continuant participates in some way in the process. The relation obtains, for example, when this particular process of oxygen exchange across this particular alveolar membrane has_participant this particular sample of hemoglobin at this particular time.")

(exported_identifier has_participant "OBO_REL_I:0000019")

(text_definition_xref has_participant "PMID:15892874")


(forall (i1 i2 t)
 (if (has_participant i1 i2 t)
  (and (instance_of t TemporalInstant)(instance_of i1 Occurrent t)(instance_of i2 Continuant t))))


(forall (i1 i2 i3)
 (if (and (realizes i1 i2)(inheres_in i2 i3))
  (has_participant i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (realizes i1 i2 t)(inheres_in i2 i3 t))
  (has_participant i1 i3 t)))


(forall (i1 i2 i3)
 (if (and (has_participant i1 i2)(part_of i2 i3))
  (has_participant i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (has_participant i1 i2 t)(part_of i2 i3 t))
  (has_participant i1 i3 t)))

(relation participates_in)

(relation participates_in)


(forall (a b)
 (if (participates_in a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (participates_in a b t)
  (and (instance a)(instance b))))

(label participates_in participates_in)

(domain participates_in IndependentContinuant)

(range participates_in Occurrent)


(forall (a b)
 (iff (participates_in a b)
(has_participant b a)))


(forall (a b t)
 (iff (participates_in a b t)
(has_participant b a t)))

(exported_identifier participates_in "OBO_REL_I:0000020")


(forall (i1 i2 t)
 (if (participates_in i1 i2 t)
  (and (instance_of t TemporalInstant)(instance_of i1 Continuant t)(instance_of i2 Occurrent t))))


(forall (i1 i2 i3)
 (if (and (has_bearer i1 i2)(realized_by i2 i3))
  (participates_in i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (has_bearer i1 i2 t)(realized_by i2 i3 t))
  (participates_in i1 i3 t)))

(relation has_agent)

(relation has_agent)


(forall (a b)
 (if (has_agent a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (has_agent a b t)
  (and (instance a)(instance b))))

(label has_agent has_agent)

(subrelation has_agent has_participant)

(type_domain has_agent Occurrent)

(type_range has_agent IndependentContinuant)


(forall (a b)
 (iff (has_agent a b)
(agent_in b a)))


(forall (a b t)
 (iff (has_agent a b t)
(agent_in b a t)))

(normative_direction_for has_agent agency)

(exported_identifier has_agent "OBO_REL_I:0000021")

(text_definition has_agent "As for has_participant, but with the additional condition that the component instance is causally active in the relevant process")

(text_definition_xref has_agent "PMID:15892874")

(relation agent_in)

(relation agent_in)


(forall (a b)
 (if (agent_in a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (agent_in a b t)
  (and (instance a)(instance b))))

(label agent_in agent_in)

(subrelation agent_in participates_in)

(domain agent_in IndependentContinuant)

(range agent_in Occurrent)


(forall (a b)
 (iff (agent_in a b)
(has_agent b a)))


(forall (a b t)
 (iff (agent_in a b t)
(has_agent b a t)))

(exported_identifier agent_in "OBO_REL_I:0000022")

(instance_level agent_id)

(relation inheres_in)

(relation inheres_in)


(forall (a b)
 (if (inheres_in a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (inheres_in a b t)
  (and (instance a)(instance b))))

(label inheres_in inheres_in)


(forall (a b)
 (iff (inheres_in a b)
(bearer_of b a)))


(forall (a b t)
 (iff (inheres_in a b t)
(bearer_of b a t)))

(normative_direction_for inheres_in inherence)

(comment inheres_in "This relation links qualities, functions, dispositions and other dependent continuants to their bearers. Examples: The redness that ineres in a Drosophila eye; Catalytic activity function inheres_in catalytic molecule.")

(exact_synonym inheres_in has_bearer)

(exported_identifier inheres_in "OBO_REL_I:0000026")

(text_definition inheres_in "A primitive relation that holds between a dependent continuant instance and a bearer")

(text_definition_xref inheres_in "ontology.buffalo.edu/bfo/SQU.pdf")

(obsolete_axiom (domain inheres_in DependentContinuant)

)

(domain inheres_in SpecificallyDependentContinuant)


(forall (i1 i2 t)
 (if (inheres_in i1 i2 t)
  (and (instance_of t TemporalInstant)(instance_of i1 SpecificallyDependentContinuant t)(instance_of i2 Entity t))))

(relation bearer_of)

(relation bearer_of)


(forall (a b)
 (if (bearer_of a b)
  (and (instance a)(instance b))))


(forall (a b t)
 (if (bearer_of a b t)
  (and (instance a)(instance b))))

(label bearer_of bearer_of)


(forall (a b)
 (iff (bearer_of a b)
(inheres_in b a)))


(forall (a b t)
 (iff (bearer_of a b t)
(inheres_in b a t)))

(exact_synonym bearer_of has_inherent)

(exact_synonym bearer_of has_inherer)

(exact_synonym bearer_of bears)

(exact_synonym bearer_of is_bearer_of)

(exported_identifier bearer_of "OBO_REL_I:0000027")

(text_definition bearer_of "A relation between an entity and a dependent continuant; the reciprocal relation of inheres_in")

(range bearer_of DependentContinuant)

(relation quality_of)

(label quality_of quality_of)

(equivalent_relation_between quality_of specifically_inheres_in Quality Entity)

(subrelation quality_of inheres_in)


(forall (a b)
 (iff (quality_of a b)
(has_quality b a)))


(forall (a b t)
 (iff (quality_of a b t)
(has_quality b a t)))


(forall (x y1 y2)
 (if (and (quality_of x y1)(quality_of x y2))
  (= y1 y2)))


(forall (x y1 y2 t)
 (if (and (quality_of x y1 t)(quality_of x y2 t))
  (= y1 y2)))

(normative_direction_for quality_of quality)

(exact_synonym quality_of is_quality_of)

(exported_identifier quality_of "OBO_REL_I:0000028")

(text_definition quality_of "A relation between a quality Q and an entity E. Q quality_of E iff: Q inheres_in E and Q is a quality")

(domain quality_of Quality)

(relation has_quality)

(label has_quality has_quality)

(subrelation has_quality bearer_of)


(forall (a b)
 (iff (has_quality a b)
(quality_of b a)))


(forall (a b t)
 (iff (has_quality a b t)
(quality_of b a t)))

(exported_identifier has_quality "OBO_REL_I:0000029")

(text_definition has_quality "A relation between an entity and a quality. For types: E has_quality Q iff: for any eEt, exists qQt such that q inheres_in e at t. For instances: e has_quality q at t iff q inheres_in e at t and q instance-of Quality")

(range has_quality Quality)

(relation function_of)

(label function_of function_of)

(subrelation function_of inheres_in)

(equivalent_relation_between function_of inheres_in Function IndependentContinuant)


(forall (a b)
 (iff (function_of a b)
(has_function b a)))


(forall (a b t)
 (iff (function_of a b t)
(has_function b a t)))

(normative_direction_for function_of function)

(comment function_of "Example: 'to blood pump' function_of 'heart'")

(exported_identifier function_of "OBO_REL_I:0000030")

(text_definition function_of "f function_of c at t iff : f inheres_in c at t and f instantiates a function")

(domain function_of Function)

(range function_of IndependentContinuant)

(relation has_function)

(label has_function has_function)

(subrelation has_function bearer_of)

(equivalent_relation_between has_function bearer_of IndependentContinuant Function)


(forall (a b)
 (iff (has_function a b)
(function_of b a)))


(forall (a b t)
 (iff (has_function a b t)
(function_of b a t)))

(comment has_function "heart has_function to-pump-blood")

(exported_identifier has_function "OBO_REL_I:0000031")

(text_definition has_function "Relation between an independent continuant and a function.")

(domain has_function IndependentContinuant)

(range has_function Function)

(relation role_of)


(forall (x y1 y2)
 (if (and (role_of x y1)(role_of x y2))
  (= y1 y2)))


(forall (x y1 y2 t)
 (if (and (role_of x y1 t)(role_of x y2 t))
  (= y1 y2)))

(label role_of role_of)

(subrelation role_of inheres_in)

(equivalent_relation_between role_of inheres_in Role IndependentContinuant)


(forall (a b)
 (iff (role_of a b)
(has_role b a)))


(forall (a b t)
 (iff (role_of a b t)
(has_role b a t)))

(normative_direction_for role_of role)

(exported_identifier role_of "OBO_REL_I:0000032")

(text_definition role_of "A relation between a role r and a continuant c. r role_of c at t iff: r inheres_in c at t and r instance_of Role at t")

(domain role_of Role)

(range role_of IndependentContinuant)

(relation has_role)

(label has_role has_role)

(equivalent_relation_between has_role bearer_of IndependentContinuant Role)

(subrelation has_role bearer_of)


(forall (a b)
 (iff (has_role a b)
(role_of b a)))


(forall (a b t)
 (iff (has_role a b t)
(role_of b a t)))

(exported_identifier has_role "OBO_REL_I:0000033")

(text_definition has_role "A relation between a continuant C and a role R. The inverse_of role_of.")

(domain has_role IndependentContinuant)

(range has_role Role)

(relation realizes)

(label realizes realizes)


(forall (a b)
 (iff (realizes a b)
(realized_by b a)))


(forall (a b t)
 (iff (realizes a b t)
(realized_by b a t)))

(comment realizes "in BFO realizable is the parent of function, role and disposition. We should also have realization_of and has_realizable for consistency. Will the terminology get too confusing?")

(narrow_synonym realizes is_realization_of)

(narrow_synonym realizes realization_of)

(narrow_synonym realizes is_functioning_of)

(narrow_synonym realizes executes)

(exported_identifier realizes "OBO_REL_I:0000034")

(text_definition realizes "Relation between a process and a realizable entity")

(example realizes (realizes reaction1 function1)

 )

(domain realizes Process)

(range realizes RealizableEntity)

(relation realized_by)

(label realized_by realized_by)


(forall (a b)
 (iff (realized_by a b)
(realizes b a)))


(forall (a b t)
 (iff (realized_by a b t)
(realizes b a t)))


(forall (i1 i2 i3)
 (if (and (realized_by i1 i2)(part_of i2 i3))
  (realized_by i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (realized_by i1 i2 t)(part_of i2 i3 t))
  (realized_by i1 i3 t)))

(normative_direction_for realized_by realization)

(related_synonym realized_by executed_during)

(narrow_synonym realized_by realized_as)

(narrow_synonym realized_by is_realized_as)

(narrow_synonym realized_by executed_by)

(narrow_synonym realized_by has_realization)

(narrow_synonym realized_by has_functioning)

(exported_identifier realized_by "OBO_REL_I:0000035")

(text_definition realized_by "Relation between a realizable entity (such as a function or role) and a process.")

(example realized_by (realized_by function1 reaction1)

 )

(domain realized_by RealizableEntity)

(range realized_by Process)

(relation derives_from)

(label derives_from derives_from)

(label derives_from derives_from)

(domain derives_from Continuant)

(range derives_from Continuant)


(forall (a b)
 (iff (derives_from a b)
(derived_into b a)))


(forall (a b t)
 (iff (derives_from a b t)
(derived_into b a t)))


(forall (x y z)
 (if (and (derives_from x y)(derives_from y z))
  (derives_from x z)))


(forall (x y z t)
 (if (and (derives_from x y t)(derives_from y z t))
  (derives_from x z t)))

(normative_direction_for derives_from derives)

(comment derives_from "Derivation as a relation between instances. The temporal relation of derivation is more complex. Transformation, on the instance level, is just the relation of identity: each adult is identical to some child existing at some earlier time. Derivation on the instance-level is a relation holding between non-identicals. More precisely, it holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later. Thus we will have axioms to the effect that from c derives_from c1 we can infer that c and c1 are not identical and that there is some instant of time t such that c1 exists only prior to and c only subsequent to t. We will also be able to infer that the spatial region occupied by c as it begins to exist at t overlaps with the spatial region occupied by c1 as it ceases to exist in the same instant.")

(exact_synonym derives_from derived_from)

(exported_identifier derives_from "OBO_REL_I:0000015")

(text_definition derives_from "Derivation on the instance level (*derives_from*) holds between distinct material continuants when one succeeds the other across a temporal divide in such a way that at least a biologically significant portion of the matter of the earlier continuant is inherited by the later.")

(text_definition_xref derives_from "PMID:15892874")


(forall (c c1)
 (if (derives_from c c1)
  
  (exists (t)(and (only_exists_prior_to c1 t)(only_exists_subsequent_to c t)))))

(relation derived_into)

(label derived_into derived_into)

(domain derived_into Continuant)

(range derived_into Continuant)


(forall (a b)
 (iff (derived_into a b)
(derives_from b a)))


(forall (a b t)
 (iff (derived_into a b t)
(derives_from b a t)))


(forall (x y z)
 (if (and (derived_into x y)(derived_into y z))
  (derived_into x z)))


(forall (x y z t)
 (if (and (derived_into x y t)(derived_into y z t))
  (derived_into x z t)))

(exported_identifier derived_into "OBO_REL_I:0000016")

(relation preceded_by)

(label preceded_by preceded_by)

(domain preceded_by Occurrent)

(range preceded_by Occurrent)


(forall (a b)
 (iff (preceded_by a b)
(precedes b a)))


(forall (a b t)
 (iff (preceded_by a b t)
(precedes b a t)))


(forall (x y z)
 (if (and (preceded_by x y)(preceded_by y z))
  (preceded_by x z)))


(forall (x y z t)
 (if (and (preceded_by x y t)(preceded_by y z t))
  (preceded_by x z t)))

(comment preceded_by "An example is: translation preceded_by transcription; aging preceded_by development (not however death preceded_by aging). Where derives_from links classes of continuants, preceded_by links classes of processes. Clearly, however, these two relations are not independent of each other. Thus if cells of type C1 derive_from cells of type C, then any cell division involving an instance of C1 in a given lineage is preceded_by cellular processes involving an instance of C.    The assertion P preceded_by P1 tells us something about Ps in general: that is, it tells us something about what happened earlier, given what we know about what happened later. Thus it does not provide information pointing in the opposite direction, concerning instances of P1 in general; that is, that each is such as to be succeeded by some instance of P. Note that an assertion to the effect that P preceded_by P1 is rather weak; it tells us little about the relations between the underlying instances in virtue of which the preceded_by relation obtains. Typically we will be interested in stronger relations, for example in the relation immediately_preceded_by, or in relations which combine preceded_by with a condition to the effect that the corresponding instances of P and P1 share participants, or that their participants are connected by relations of derivation, or (as a first step along the road to a treatment of causality) that the one process in some way affects (for example, initiates or regulates) the other.")

(exported_identifier preceded_by "OBO_REL_I:0000017")

(text_definition preceded_by "P preceded_by P' if and only if: given any process p that instantiates P at a time t, there is some process p' such that p' instantiates P' at time t', and t' is earlier than t. ")

(text_definition_xref preceded_by "PMID:15892874")


(forall (p p1)
 (iff (preceded_by p p1)

  (forall (t t1)
   (if (and (occurs_at p t)(occurs_at p1 t1))
    (earlier_than t1 t)))))

(relation immediately_preceded_by)

(label immediately_preceded_by immediately_preceded_by)

(exported_identifier immediately_preceded_by "OBO_REL_I:0000044")


(forall (p p1)
 (iff (immediately_preceded_by p p1)

  (exists (t)(and (first_instant_of t p)(last_instant_of t p1)))))

(relation precedes)

(label precedes precedes)

(domain precedes Occurrent)

(range precedes Occurrent)


(forall (a b)
 (iff (precedes a b)
(preceded_by b a)))


(forall (a b t)
 (iff (precedes a b t)
(preceded_by b a t)))


(forall (x y z)
 (if (and (precedes x y)(precedes y z))
  (precedes x z)))


(forall (x y z t)
 (if (and (precedes x y t)(precedes y z t))
  (precedes x z t)))

(exported_identifier precedes "OBO_REL_I:0000018")

(relation occurs_in)

(label occurs_in occurs_in)

(exact_synonym occurs_in unfolds_in)

(exact_synonym occurs_in process_located_in)

(exact_synonym occurs_in all_participants_located_in)


(forall (i1 i2 i3)
 (if (and (has_participant i1 i2)(located_in i2 i3))
  (occurs_in i1 i3)))


(forall (i1 i2 i3 t)
 (if (and (has_participant i1 i2 t)(located_in i2 i3 t))
  (occurs_in i1 i3 t)))

(exported_identifier occurs_in "OBO_REL_I:0000064")

(text_definition occurs_in "p occurs_in s at t : all the participants of of p are spatially contained by s at t.")

(all_only_chain occurs_in has_participant located_in)


(forall (p s t)
 (iff (occurs_in p s t)

  (forall (c)
   (if (has_participant p c t)
    (located_in c s t)))))


